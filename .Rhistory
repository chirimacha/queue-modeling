# add virtual wait to vector of VWs
virtualWaitVec[m] <- virtual.wait
# determine the redispersion as a function of virtual wait
redisVirtual[m] <- infestivity(virtual.wait)
# schedule future departure time for this cust
departures[length(departures) + 1] <- new.time + virtual.wait
# determine new rate of arrival dependent on a' and redispersion
redisVect[m] <- redispersionLogis(custRemainArr, new.time)
current.rate <- alpha.prime + redisVect[m]
# calculate average beta as func of time
avgBeta <- avgBeta + ((next.arr - time) * redisVect[m])
# Generate next interarrival time
next.arr <- new.time + rexp(1, current.rate)
# update the arrival rate vector
current.rate.v[n] <- current.rate
# add number of cust in system
numCustSyst[m] <- no.in.system
# calculate load of the system
load[m] <- sum(departures - new.time)
}
# System is not empty
else {
#  The next event is an arrival
if (next.arr<departures[1]) {
# store cust arrival time
m <- m + 1
customer.arrival[m] <- next.arr
custRemainArr[length(custRemainArr) + 1] <- next.arr
# Update simulation clock
new.time <- next.arr
# update number in system
no.in.system <- no.in.system + 1
# calculate avg number of customers in the system
avg.no.in.system <- avg.no.in.system + ((next.arr - time) * no.in.system)
# Generate service time for this arrival and calculate virtual wait
next.serv <- rexp(1, mu)
virtual.wait <- virtual.wait - (next.arr - time) + next.serv
departures[length(departures) + 1] <- new.time + virtual.wait
# add virtual wait to vector of VWs
virtualWaitVec[m] <- virtual.wait
# determine the redispersion as a function of virtual wait
redisVirtual[m] <- infestivity(virtual.wait)
# determine new rate of arrival based on a' and redispersion
redisVect[m] <- redispersionLogis(custRemainArr, new.time)
current.rate <- alpha.prime + redisVect[m]
# calculate average beta as func of time
avgBeta <- avgBeta + ((next.arr - time) * redisVect[m])
# Generate next interarrival time
next.arr <- new.time + rexp(1, current.rate)
# update the arrival rate vector
current.rate.v[n] <- current.rate
# add number of cust in system
numCustSyst[m] <- no.in.system
# calculate load of the system
load[m] <- sum(departures - new.time)
}
#  the next event is a departure
else {
# update simulation clock
new.time <- departures[1]
# update virtual wait
virtual.wait <- virtual.wait - (new.time - time)
# update num of custs in system
no.in.system <- no.in.system - 1
# update calculation of avg cust in system
avg.no.in.system <- avg.no.in.system + ((new.time - time) * no.in.system)
# calculate average beta as func of time
avgBeta <- avgBeta + ((next.arr - time) * redisVect[m])
# update the number of cust served by 1
n <- n + 1
customer.total.time[n] <- new.time - customer.arrival[n]
# remove arrive time of service customer
custRemainArr <- custRemainArr[-c(1)]
# remove this departure from scheduled departures
departures <- departures[-c(1)]
# add number of cust in system
numCustSyst[n] <- no.in.system
# calculate load of the system
load[m] <- sum(departures - new.time)
}
}
timeVec[m] <- new.time
time <- new.time
}
################### End Simulation ########################
######################## PLOTS ###########################
# plots of redispersion as the cumulative sum of gamma
plot(customer.arrival, redisVect)
hist(redisVect[warmup.no.cust:target.no.customers],
main = paste("Distribution of Redispersion Rates"),
xlab = "Redispersion Rates",
col = "black",
border = "blue"
)
# plots of redispersion as a function of virtual wait
hist(redisVirtual,
main = paste("Distribution of Redispersion Rates - Virtual Wait" ),
xlab = "Redispersion Rates",
col = "black",
border = "Red"
)
info <- c(avg.no.in.system / (time - end.warmup), mean(customer.total.time[warmup.no.cust:target.no.customers]),
mean(redisVect[warmup.no.cust:target.no.customers]), avgBeta/(time - end.warmup))
print(info)
# cumulative average
cumAvgCustTime <- cumsum(customer.total.time) / seq_along(customer.total.time)
plot(cumAvgCustTime, type = "l", main = paste("AlphaPrime = 33 & Mu = 40"), xlab = "No. of Customers")
load
#logistic function
#input: t (in years)
#output: infestivity (infestations per house per year)
getgr<-function(k,y0,r,t) {
out<-k/(1+((k-y0)/y0)*exp(-r*t))
return(out)
}
k<-3 # carrying capacity 3 infestations per house per year
y0<-0.1 # initial infestivity (0.1 infestations per house per year)
r<-1.68
integrate(getgr,lower=0,upper=2, k=k, y0=y0, r=r)
groptim<-function(r,k,y0,estimate,lowerbound,upperbound) {
integrategr<-integrate(getgr,lower=lowerbound,upper=upperbound,k=k,y0=y0,r=r)
integrategr<-as.numeric(integrategr[1])
error<-(integrategr-estimate)*(integrategr-estimate)
return(error)
}
#this is from Corentin and Karthiks paper, though is estimated assuming constant rate of migration. Were working on relaxing that assumption.
estimate<-1.04
roptim<-optim(1.68, fn=groptim, k=k, y0=y0, estimate=estimate, lowerbound=0, upperbound=2)
r<-roptim$par
#test out values in a plot
t<-1:1000/100
PRED<-getgr(k,y0,r,t)
plot(PRED~t,xlab="Time Since Infestation (Years)", ylab="Expected Infestivity (Additional Infestations Per House Per Year)",type="l")
#bin by ranges of integration
tmax<-10
bin<-c(1:tmax)
for(i in 1:tmax){
temp<-integrate(getgr,lower=i-1,upper=i, k=k, y0=y0, r=r)
bin[i]<-temp[[1]]/1 #the division by one is mathematically redundant but gives us infestivity again
}
barplot(bin, add=F)
#plot the function and bins
par(mfrow=c(1,2))
plot(PRED~t,xlab="Time Since Infestation (Years)", ylab="Expected Infestivity (Additional Infestations Per House Per Year)",type="l")
barplot(bin, names.arg =1:10,xlab="Time Since Infestation (Years)", ylab="Average Infestivity (Additional Infestations Per House Per Year)", add=F)
## This program finds the P1 and P2 for a given denuncia
## dataset: inspecciones.csv and rociado.csv
#set directory
#setwd("~/queue-modeling/")    #for Mike
##setwd("/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
inspecciones <- data.frame(read.csv("inspecciones - INSPECCIONES.csv"))
#inspecciones <- data.frame(read.csv("rociado - ROCIADO.csv"))
inspecciones <- inspecciones[, c("UNICODE.", "SITUACION","NRO_DENUNCIA","DIA", "MES", "ANIO", "IN_TCAP_TOT", "PD_TCAP_TOT", "INSP_COMPLETA")]
## Sum contents of IN_TCAP_TOT and PD_TCAP_TOT and INSP_COMPLETA and replace NA with zeros
inspecciones$INSP_COMPLETA <- ifelse(is.na(inspecciones$INSP_COMPLETA), 0, inspecciones$INSP_COMPLETA)
inspecciones$IN_TCAP_TOT <- ifelse(is.na(inspecciones$IN_TCAP_TOT), 0, inspecciones$IN_TCAP_TOT)
inspecciones$PD_TCAP_TOT <- ifelse(is.na(inspecciones$PD_TCAP_TOT), 0, inspecciones$PD_TCAP_TOT)
inspecciones$sumTotal <- inspecciones$IN_TCAP_TOT + inspecciones$PD_TCAP_TOT
inspecciones$sumTotal <- ifelse(is.na(inspecciones$sumTotal), 0, inspecciones$sumTotal)
## replace $Situacion with only positive contents (sumtotal > 0)
indPos <- inspecciones[which(inspecciones$sumTotal != 0), ]
################################################
#  Choose Dataset
#  indPos - P1 and P2 positive (TRUE)
#  inspecciones.date - P1 and P2 pos and non-pos (FALSE)
################################################
if (TRUE) {
## Take starting at 2012 when P1 and P2 was utilized
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- indPos[which(indPos$ANIO >= 2012),]
} else {
## Subset larger dataset for when P1 and P2 notation was used
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- inspecciones[which(inspecciones$ANIO >= 2012),]
}
## Get positive denuncias where sumTotal != 0
denunNo <- indPos$NRO_DENUNCIA[indPos$SITUACION == "D"]
#############################################
# countPValue #
## dNo is an int, while pValue is a string
## Returns number of P1s or P2s for given dNo
## TODO: take in  a data base as a function
#############################################
countPValue <- function(dNo, pValue) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$SITUACION == pValue)
sum1 <- 0
sum2 <- 0
# Account to for mispelling of P1 and P2
if (pValue == "P1") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p1")
}
if (pValue == "P2") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p2")
}
return(sum + sum1 + sum2)
}
##########################################
# insp_completa  #
##all houses that had an inspection##
##########################################
insp_completa <- inspecciones.date$INSP_COMPLETA[inspecciones.date$NRO_DENUNCIA[inspecciones.date$SITUACION == "D"]]
## function to count inspCompleta for each postive denuncia
countCompleta <- function(dNo, inspCompleta) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$INSP_COMPLETA == inspCompleta)
return(sum)
}
##########################################
# sumTotal #
##Total bugs from denuncia##
##########################################
countTotalBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
sum <- sum(denun$sumTotal)
return(sum)
}
##########################################
# Total Sum - countAllBugs #
# Max between D P1 P2 - countMaxBugs #
##########################################
countAllBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$sumTotal)
return(sum)
}
countMaxBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
indDeNunMax <- which.max(indDeNun$sumTotal)
max <- indDeNun$sumTotal[indDeNunMax]
return(max)
}
##########################################
# Date of Dununcia #
##########################################
denunciaDate <- function(dNo, type) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
if (type == "DIA") {
DIA <- denun$DIA[[1]]
return(DIA)
}
if (type == "MES") {
MES <- denun$MES[[1]]
return(MES)
}
if (type == "ANIO") {
ANIO <- denun$ANIO[[1]]
return(ANIO)
}
}
# loop through count function to create table of P1 and P2 per denunNo including inspCompleta
valTable <- c()
for (i in denunNo) {
valTable <- rbind(valTable, c(i, countPValue(i, "P1"), countPValue(i, "P2"),
countMaxBugs(i), denunciaDate(i, "DIA"),
denunciaDate(i, "MES"), denunciaDate(i, "ANIO"), countCompleta(i, "INSP_COMPLETA")))
}
colnames(valTable) <- c("NRO_DENUNCIA", "P1", "P2", "Total Bug Count", "DIA",
"MES", "ANIO", "INSPCOMPLETA")
valTable.df <- data.frame(valTable)
print(valTable.df)
hist(as.numeric(valTable.df$P1))
hist(as.numeric(valTable.df$P2))
## This program finds the P1 and P2 for a given denuncia
## dataset: inspecciones.csv and rociado.csv
#set directory
#setwd("~/queue-modeling/")    #for Mike
setwd("/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
inspecciones <- data.frame(read.csv("inspecciones - INSPECCIONES.csv"))
#inspecciones <- data.frame(read.csv("rociado - ROCIADO.csv"))
inspecciones <- inspecciones[, c("UNICODE.", "SITUACION","NRO_DENUNCIA","DIA", "MES", "ANIO", "IN_TCAP_TOT", "PD_TCAP_TOT", "INSP_COMPLETA")]
## Sum contents of IN_TCAP_TOT and PD_TCAP_TOT and INSP_COMPLETA and replace NA with zeros
inspecciones$INSP_COMPLETA <- ifelse(is.na(inspecciones$INSP_COMPLETA), 0, inspecciones$INSP_COMPLETA)
inspecciones$IN_TCAP_TOT <- ifelse(is.na(inspecciones$IN_TCAP_TOT), 0, inspecciones$IN_TCAP_TOT)
inspecciones$PD_TCAP_TOT <- ifelse(is.na(inspecciones$PD_TCAP_TOT), 0, inspecciones$PD_TCAP_TOT)
inspecciones$sumTotal <- inspecciones$IN_TCAP_TOT + inspecciones$PD_TCAP_TOT
inspecciones$sumTotal <- ifelse(is.na(inspecciones$sumTotal), 0, inspecciones$sumTotal)
## replace $Situacion with only positive contents (sumtotal > 0)
indPos <- inspecciones[which(inspecciones$sumTotal != 0), ]
################################################
#  Choose Dataset
#  indPos - P1 and P2 positive (TRUE)
#  inspecciones.date - P1 and P2 pos and non-pos (FALSE)
################################################
if (TRUE) {
## Take starting at 2012 when P1 and P2 was utilized
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- indPos[which(indPos$ANIO >= 2012),]
} else {
## Subset larger dataset for when P1 and P2 notation was used
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- inspecciones[which(inspecciones$ANIO >= 2012),]
}
## Get positive denuncias where sumTotal != 0
denunNo <- indPos$NRO_DENUNCIA[indPos$SITUACION == "D"]
#############################################
# countPValue #
## dNo is an int, while pValue is a string
## Returns number of P1s or P2s for given dNo
## TODO: take in  a data base as a function
#############################################
countPValue <- function(dNo, pValue) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$SITUACION == pValue)
sum1 <- 0
sum2 <- 0
# Account to for mispelling of P1 and P2
if (pValue == "P1") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p1")
}
if (pValue == "P2") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p2")
}
return(sum + sum1 + sum2)
}
##########################################
# insp_completa  #
##all houses that had an inspection##
##########################################
insp_completa <- inspecciones.date$INSP_COMPLETA[inspecciones.date$NRO_DENUNCIA[inspecciones.date$SITUACION == "D"]]
## function to count inspCompleta for each postive denuncia
countCompleta <- function(dNo, inspCompleta) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$INSP_COMPLETA == inspCompleta)
return(sum)
}
##########################################
# sumTotal #
##Total bugs from denuncia##
##########################################
countTotalBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
sum <- sum(denun$sumTotal)
return(sum)
}
##########################################
# Total Sum - countAllBugs #
# Max between D P1 P2 - countMaxBugs #
##########################################
countAllBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$sumTotal)
return(sum)
}
countMaxBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
indDeNunMax <- which.max(indDeNun$sumTotal)
max <- indDeNun$sumTotal[indDeNunMax]
return(max)
}
##########################################
# Date of Dununcia #
##########################################
denunciaDate <- function(dNo, type) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
if (type == "DIA") {
DIA <- denun$DIA[[1]]
return(DIA)
}
if (type == "MES") {
MES <- denun$MES[[1]]
return(MES)
}
if (type == "ANIO") {
ANIO <- denun$ANIO[[1]]
return(ANIO)
}
}
# loop through count function to create table of P1 and P2 per denunNo including inspCompleta
valTable <- c()
for (i in denunNo) {
valTable <- rbind(valTable, c(i, countPValue(i, "P1"), countPValue(i, "P2"),
countMaxBugs(i), denunciaDate(i, "DIA"),
denunciaDate(i, "MES"), denunciaDate(i, "ANIO"), countCompleta(i, "INSP_COMPLETA")))
}
colnames(valTable) <- c("NRO_DENUNCIA", "P1", "P2", "Total Bug Count", "DIA",
"MES", "ANIO", "INSPCOMPLETA")
valTable.df <- data.frame(valTable)
print(valTable.df)
hist(as.numeric(valTable.df$P1))
hist(as.numeric(valTable.df$P2))
setwd("/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
setwd("/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
setwd("~/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
setwd("/Users/patrickemedom/Desktop/Levy_lab/queue-modeling/")   #for Patrick
setwd("~/Desktop/Levy Lab/queue-modeling")
setwd("~/Desktop/Levy Lab/queue-modeling")   #for Patrick
## This program finds the P1 and P2 for a given denuncia
## dataset: inspecciones.csv and rociado.csv
#set directory
#setwd("~/queue-modeling/")    #for Mike
setwd("~/Desktop/Levy Lab/queue-modeling")   #for Patrick
inspecciones <- data.frame(read.csv("inspecciones - INSPECCIONES.csv"))
#inspecciones <- data.frame(read.csv("rociado - ROCIADO.csv"))
inspecciones <- inspecciones[, c("UNICODE.", "SITUACION","NRO_DENUNCIA","DIA", "MES", "ANIO", "IN_TCAP_TOT", "PD_TCAP_TOT", "INSP_COMPLETA")]
## Sum contents of IN_TCAP_TOT and PD_TCAP_TOT and INSP_COMPLETA and replace NA with zeros
inspecciones$INSP_COMPLETA <- ifelse(is.na(inspecciones$INSP_COMPLETA), 0, inspecciones$INSP_COMPLETA)
inspecciones$IN_TCAP_TOT <- ifelse(is.na(inspecciones$IN_TCAP_TOT), 0, inspecciones$IN_TCAP_TOT)
inspecciones$PD_TCAP_TOT <- ifelse(is.na(inspecciones$PD_TCAP_TOT), 0, inspecciones$PD_TCAP_TOT)
inspecciones$sumTotal <- inspecciones$IN_TCAP_TOT + inspecciones$PD_TCAP_TOT
inspecciones$sumTotal <- ifelse(is.na(inspecciones$sumTotal), 0, inspecciones$sumTotal)
## replace $Situacion with only positive contents (sumtotal > 0)
indPos <- inspecciones[which(inspecciones$sumTotal != 0), ]
################################################
#  Choose Dataset
#  indPos - P1 and P2 positive (TRUE)
#  inspecciones.date - P1 and P2 pos and non-pos (FALSE)
################################################
if (TRUE) {
## Take starting at 2012 when P1 and P2 was utilized
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- indPos[which(indPos$ANIO >= 2012),]
} else {
## Subset larger dataset for when P1 and P2 notation was used
indPos <- indPos[which(indPos$ANIO >= 2012),]
inspecciones.date <- inspecciones[which(inspecciones$ANIO >= 2012),]
}
## Get positive denuncias where sumTotal != 0
denunNo <- indPos$NRO_DENUNCIA[indPos$SITUACION == "D"]
#############################################
# countPValue #
## dNo is an int, while pValue is a string
## Returns number of P1s or P2s for given dNo
## TODO: take in  a data base as a function
#############################################
countPValue <- function(dNo, pValue) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$SITUACION == pValue)
sum1 <- 0
sum2 <- 0
# Account to for mispelling of P1 and P2
if (pValue == "P1") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p1")
}
if (pValue == "P2") {
sum1 <- sum1 + sum(indDeNun$SITUACION == "p2")
}
return(sum + sum1 + sum2)
}
##########################################
# insp_completa  #
##all houses that had an inspection##
##########################################
insp_completa <- inspecciones.date$INSP_COMPLETA[inspecciones.date$NRO_DENUNCIA[inspecciones.date$SITUACION == "D"]]
## function to count inspCompleta for each postive denuncia
countCompleta <- function(dNo, inspCompleta) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$INSP_COMPLETA == inspCompleta)
return(sum)
}
##########################################
# sumTotal #
##Total bugs from denuncia##
##########################################
countTotalBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
sum <- sum(denun$sumTotal)
return(sum)
}
##########################################
# Total Sum - countAllBugs #
# Max between D P1 P2 - countMaxBugs #
##########################################
countAllBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
sum <- sum(indDeNun$sumTotal)
return(sum)
}
countMaxBugs <- function(dNo) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
indDeNunMax <- which.max(indDeNun$sumTotal)
max <- indDeNun$sumTotal[indDeNunMax]
return(max)
}
##########################################
# Date of Dununcia #
##########################################
denunciaDate <- function(dNo, type) {
indDeNun <- inspecciones.date[which(inspecciones.date$NRO_DENUNCIA == dNo),]
denun <- indDeNun[which(indDeNun$SITUACION == "D"),]
if (type == "DIA") {
DIA <- denun$DIA[[1]]
return(DIA)
}
if (type == "MES") {
MES <- denun$MES[[1]]
return(MES)
}
if (type == "ANIO") {
ANIO <- denun$ANIO[[1]]
return(ANIO)
}
}
# loop through count function to create table of P1 and P2 per denunNo including inspCompleta
valTable <- c()
for (i in denunNo) {
valTable <- rbind(valTable, c(i, countPValue(i, "P1"), countPValue(i, "P2"),
countMaxBugs(i), denunciaDate(i, "DIA"),
denunciaDate(i, "MES"), denunciaDate(i, "ANIO"), countCompleta(i, "INSP_COMPLETA")))
}
colnames(valTable) <- c("NRO_DENUNCIA", "P1", "P2", "Total Bug Count", "DIA",
"MES", "ANIO", "INSPCOMPLETA")
valTable.df <- data.frame(valTable)
print(valTable.df)
hist(as.numeric(valTable.df$P1))
hist(as.numeric(valTable.df$P2))
View(valTable.df)
